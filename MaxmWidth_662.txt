class Solution {
    public int widthOfBinaryTree(TreeNode root) {
		Queue<TreeNode> queue = new LinkedList<>();
		Queue<Integer> queueIndex = new LinkedList<>();
		queue.add(root);
		queueIndex.add(1);
		int width = 0;
		while (!queue.isEmpty()) {
			int size = queue.size();
			int start = 0;
			int end = 0;
			for (int i = 0; i < size; i++) {
				TreeNode node = queue.poll();
				int index = queueIndex.poll();
				if (i == 0) {
					//update start index
					start = index;
				}
				if (i == size - 1) {
					end = index;
				}
				if (node.left != null) {
					queue.add(node.left);
					queueIndex.add(index * 2);
				}
				if (node.right != null) {
					queue.add(node.right);
					queueIndex.add(index * 2 + 1);
				}
			}
		    width = Math.max(width, end - start + 1);
		}
		return width;
	}
}