//using map, Accepted 
class Solution {
   public boolean checkInclusion(String s1, String s2) {
        
        int a =s1.length();
        Map<Character, Integer> map=new HashMap<>();
        
        for(int x=0;x<a;x++)
        {
            map.put(s1.charAt(x),map.getOrDefault(s1.charAt(x),0)+1);
        }
        
        int b=s2.length();
        
        if(b<a)
            return false;
        
        for(int y=0;y<=b-a;y++)
        {
            String per=s2.substring(y,y+a);
            int l=per.length();
            Map<Character,Integer> map1=new HashMap<>();
            for(int z=0;z<l;z++)
            {
               map1.put(per.charAt(z),map1.getOrDefault(per.charAt(z),0)+1); 
            }
            if(map.equals(map1))
            {
                return true;
            }
            
            map1.clear();
        }
        
        
        return false;
        
    }
}

//using recursion, TimeLimitExceed Not Accepted

class Solution {
    public boolean checkInclusion(String s1, String s2) {
        ArrayList al = new ArrayList<String>();
        Permutn(s1, "",al);
        for (int i=0;i<al.size();i++){
            if(s2.contains(al.get(i).toString())){
                return true;
            }
        }
        return false;
    }
    
     static void Permutn(String str, String ans,ArrayList al)
    {
        if (str.length() == 0) {
            al.add(ans);
            return;
        }
        for (int i = 0; i < str.length(); i++) {

            char ch = str.charAt(i);

            String ros = str.substring(0, i) + str.substring(i + 1);
            Permutn(ros, ans + ch,al);
        }
    }
}