//O(n^2) simple approach
class Solution {
    public int subarraySum(int[] nums, int k) {
        int n = nums.length;
        int[] psum = new int[n+1];
        psum[0] = 0;
        for(int i=1; i<=n; i++){
            psum[i] = psum[i-1] + nums[i-1];
        }
        int count = 0;
        for(int i=1; i<=n; i++){
            for(int j=0; j<i; j++){
                if(psum[i]-psum[j] == k)
                    count++;
            }
        }
        return count;
    }

}

//Not accepted, T/S:O(n^2)/O(1), Brut-force approach
class Solution {
    public int subarraySum(int[] nums, int k) {
	var count = 0;
	for (int start = 0; start < nums.length; start++)
		for (int end = start, sum = 0; end < nums.length; end++) {
			sum += nums[end];
			if (sum == k)
				count++;
		}
	return count;
    }
}
